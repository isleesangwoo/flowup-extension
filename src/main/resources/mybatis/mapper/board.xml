<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<mapper namespace="com.spring.app.board.model.BoardDAO">

<!--  생성된 게시판 LeftBar에 나열하기 (출력) -->
<select id="selectBoardList" resultType="BoardVO" parameterType="String">
	SELECT boardNo, boardName, boardDesc, isPublic, createdBy, createdAt, status
	FROM tbl_board b
	LEFT JOIN tbl_board_department bd 
	ON b.boardNo = bd.fk_boardNo
		<if test="login_departNo != null"><!-- 로그인을 한 경우  -->
		  WHERE b.status = 1 				 				<!--  활성화된 게시판만 조회  -->
		  AND (b.isPublic = 1  								<!-- 전체 공개된 게시판이거나  -->
		       OR bd.fk_departmentNo = to_number(#{login_departNo}))   <!-- 사용자의 부서가 접근 가능한 경우  -->
		       ORDER BY createdAt DESC
		</if>       
		<if test="login_departNo == null">		    <!-- 로그인을 안한 경우  -->
		  WHERE b.status = 1 				 		<!--  활성화된 게시판만 조회  -->
		  AND b.isPublic = 1  					    <!-- 전체 공개된 게시판이거나  -->
		  ORDER BY createdAt DESC
		</if>         
	       
</select>

<!-- 게시판 생성하기 -->
<insert id="addBoard" parameterType="BoardVO">
	insert into tbl_board (boardNo,boardName,boardDesc,isPublic,createdBy) 
	values(boardSeq.nextval,#{boardName},#{boardDesc},to_number(#{isPublic}),#{createdBy})
</insert>

<!-- 게시판 생성의 공개여부 부서 설정 시 부서 워드 검색(부서 검색)  -->
<select id="addBoardSearchDept" parameterType="map" resultType="map">
	select DEPARTMENTNAME,DEPARTMENTNO
	from tbl_department
	where departmentname like '%'||#{searchWord}||'%'
</select>

<!-- 게시판 생성의 공개여부 부서 설정 시 부서 전체 검색(부서 검색) -->
<select id="addBoardSearchAllDept" resultType="map">
	select DEPARTMENTNAME,DEPARTMENTNO
	from tbl_department
</select>


<!-- 게시판 수정하기 -->
<update id="updateBoard" parameterType="HashMap">
	update tbl_board set boardName = #{boardName}, boardDesc = #{boardDesc}, isPublic = to_number(#{isPublicUpdate})
	where boardNo = to_number(#{boardNo})
</update>


<!--  수정할 input 요소에 기존값을 뿌려주기 위함. -->
<select id="getBoardDetailByNo" parameterType="String" resultType="BoardVO">
	select boardno, boardname, boarddesc, ispublic, createdby
	from tbl_board
	where boardNo = to_number(#{boardNo})
</select>


<!-- 게시판삭제(비활성화)하기(status 값변경)-->
<update id="disableBoard" parameterType="String">
	update tbl_board set status=0
	where boardNo = to_number(#{boardNo})
</update>

<!-- 글쓰기 시 글작성 할 (접근 권한있는)게시판 목록 <select> 태그에 보여주기 -->
<select id="getAccessibleBoardList"  parameterType="String" resultType="map">
	SELECT to_char(b.boardNo) AS boardNo , b.boardName
	FROM tbl_board b
	LEFT JOIN tbl_board_department bd ON b.boardNo = bd.fk_boardNo
	WHERE (b.isPublic = 1 and status = 1) 
   <if test="login_userid != null"><!-- 로그인을 한 경우  -->
	   OR bd.fk_departmentNo = (SELECT fk_departmentNo FROM tbl_employee WHERE employeeNo = to_number(#{login_userid}))  and status = 1
	</if>
</select>

<!-- 게시글 등록하기 -->
<insert id="addPost" parameterType="PostVO">
	<choose>
        <when test="isNotice == 1"> <!-- 공지사항 글로 등록할 경우 -->
            INSERT INTO tbl_post 
                (postNo, fk_boardNo, fk_employeeNo, name, subject, content, allowComments, isNotice, noticeEndDate) 
            VALUES 
                (postSeq.nextval, to_number(#{fk_boardNo}), to_number(#{login_userid}), #{login_userName}, #{subject}, #{content}, to_number(#{allowComments}), 
                to_number(#{isNotice}), TO_DATE(#{noticeEndDate}, 'YYYY-MM-DD'))
        </when>
        <otherwise>   <!-- 공지사항 글이 아닌 경우 -->
            INSERT INTO tbl_post 
                (postNo, fk_boardNo, fk_employeeNo, name, subject, content, allowComments) 
            VALUES 
                (postSeq.nextval, to_number(#{fk_boardNo}), to_number(#{login_userid}), #{login_userName}, #{subject}, #{content}, to_number(#{allowComments}))
        </otherwise>
    </choose>
</insert>

<!-- 게시판 메인 페이지에 뿌려줄 모든 게시글 조회 (조인했음)-->
<resultMap id="selectAllPost_Map" type="PostVO">
 <!-- PostVO의 필드 매핑 -->
    <result property="postNo" 			column="postNo"/>
    <result property="fk_boardNo" 		column="fk_boardNo"/>
    <result property="fk_employeeNo" 	column="fk_employeeNo"/>
    <result property="name" 			column="name"/>
    <result property="subject" 			column="subject"/>
    <result property="content" 			column="content"/>
    <result property="readCount" 		column="readCount"/>
    <result property="regDate" 			column="regDate"/>
    <result property="commentCount" 	column="commentCount"/>
    <result property="allowComments" 	column="allowComments"/>
    <result property="status" 			column="status"/>
    <result property="isNotice" 		column="isNotice"/>
    <result property="noticeEndDate" 	column="noticeEndDate"/>
    <result property="likeCount" 		column="likeCount"/>
	<result property="profileImg"       column="profileImg"/>
	<result property="positionName"     column="positionName"/>
	<result property="fileName"     	column="fileName"/>
 <!-- BoardVO의 필드 매핑 -->
    <association property="boardvo" javaType="BoardVO">
        <result property="boardNo" column="boardNo"/>
        <result property="boardName" column="boardName"/>
    </association>
</resultMap>
<select id="selectAllPost" resultMap="selectAllPost_Map" parameterType="HashMap">
	SELECT 
	    V.postNo, V.fk_boardNo, V.fk_employeeNo, V.name, 
	    case when length( V.subject) &gt; 40 then substr(subject, 0, 40) || '...' else subject end as subject, 
	    CASE 
        WHEN LENGTH(REGEXP_REPLACE(V.content, '&lt;[^&gt;]*&gt;', '')) &gt; 80 
        THEN SUBSTR(REGEXP_REPLACE(V.content, '&lt;[^&gt;]*&gt;', ''), 1, 80) || '...' 
        ELSE REGEXP_REPLACE(V.content,'&lt;[^&gt;]*&gt;', '') 
    END AS content,
	    V.readCount, V.regDate, V.commentCount, V.allowComments, V.status, 
	    V.isNotice, V.noticeEndDate,likeCount,
	    b.boardNo, b.boardName,
	    e.profileImg , p.positionName ,e.fileName
	FROM 
	    ( 
	        SELECT row_number() OVER (ORDER BY p.postNo DESC) AS rno, 
	               p.postNo, p.fk_boardNo, p.fk_employeeNo, p.name, p.subject, p.content,
	               p.readCount, to_char(p.regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate, 
	               p.commentCount, p.allowComments, p.status, p.isNotice, p.noticeEndDate,p.likeCount
	        FROM tbl_post p
            join tbl_board b
            on p.fk_boardNo = b.boardNo
            LEFT JOIN tbl_board_department bd 
            ON bd.fk_boardNo = b.boardNo
            WHERE p.status = 1 
			AND (b.isPublic = 1 OR bd.fk_departmentNo =  to_number(#{login_departmentNo}))
	    ) V
	JOIN tbl_board b ON V.fk_boardNo = b.boardNo
	JOIN tbl_employee e ON V.fk_employeeNo = e.employeeNo
    JOIN tbl_position p on e.FK_positionNo = p.positionNo
	WHERE rno BETWEEN to_number(#{startRno}) AND to_number(#{endRno})
</select>

<!-- === 총 게시물 건수(totalCount) 구하기 === --> 
   <select id="getTotalCount"  resultType="int">
      select count(*)
      from tbl_post
      where status = 1
   </select>
   
   <!-- === 해당 게시판의 총 게시물 건수(totalCount) 구하기 === --> 
   <select id="getBoardGroupPostTotalCount"  resultType="int" parameterType="String">
      select count(*)
      from tbl_post
      where status = 1 and fk_boardNo= to_number(#{boardNo})
   </select>
   
<!--    게시글 하나 조회하기(조인함) -->
	<resultMap id="goViewOnePost_Map" type="PostVO">
	 <!-- PostVO의 필드 매핑 -->
	 <result property="previouspostNo" column="previouspostNo"/>
	 <result property="previoussubject" column="previoussubject"/>
	 <result property="previousreadCount" column="previousreadCount"/>
	 <result property="previousregDate" column="previousregDate"/>
	 <result property="previousname" column="previousname"/>
	 <result property="previouslikeCount" column="previouslikeCount"/>
	 <result property="nextpostNo" column="nextpostNo"/>
	 <result property="nextsubject" column="nextsubject"/>
	 <result property="nextreadCount" column="nextreadCount"/>
	 <result property="nextregDate" column="nextregDate"/>
	 <result property="nextname" column="nextname"/>
	 <result property="nextlikeCount" column="nextlikeCount"/>
	 
	    <result property="postNo" column="postNo"/>
	    <result property="fk_boardNo" column="fk_boardNo"/>
	    <result property="fk_employeeNo" column="fk_employeeNo"/>
	    <result property="name" column="name"/>
	    <result property="subject" column="subject"/>
	    <result property="content" column="content"/>
	    <result property="readCount" column="readCount"/>
	    <result property="regDate" column="regDate"/>
	    <result property="commentCount" column="commentCount"/>
	    <result property="allowComments" column="allowComments"/>
	    <result property="isNotice" column="isNotice"/>
	    <result property="noticeEndDate" column="noticeEndDate"/>
	    <result property="likeCount" 		column="likeCount"/>
	    <result property="profileImg"       column="profileImg"/>
	    <result property="positionName"     column="positionName"/>
	
	 	<!-- BoardVO의 필드 매핑 -->
	    <association property="boardvo" javaType="BoardVO">
	        <result property="boardName" 	column="boardName"/>
	        <result property="createdBy" 	column="createdBy"/>
	    </association>
	</resultMap>
	<select id="goViewOnePost" resultMap="goViewOnePost_Map" parameterType="HashMap">
		SELECT previouspostNo, previousreadCount, previousregDate,previousname
		     , case when length(previoussubject) &lt; 30 then previoussubject 
                    else substr(previoussubject, 1, 28)||'..' end AS previoussubject,previouslikeCount
		     , postNo, fk_employeeNo, name, subject, content, readCount, regDate
		     , nextpostNo
		     , nextreadCount,nextregDate,nextname,nextlikeCount
		     , case when length(nextsubject) &lt; 30 then nextsubject 
                    else substr(nextsubject, 1, 28)||'..' end AS nextsubject
             , V.commentCount,V.allowComments,V.isNotice,V.noticeEndDate,V.likeCount
             , fk_boardNo,V.boardName,V.createdBy  
             , V.profileImg    
             , V.positionName
		FROM
		 (
		     select lag(P.postNo) over(order by P.postNo desc) AS previouspostNo
		          , lag(P.subject) over(order by P.postNo desc) AS previoussubject
		          , lag(P.readCount) over(order by P.postNo desc) AS previousreadCount
                  , lag(P.regDate) over(order by P.postNo desc) AS previousregDate
                  , lag(P.name) over(order by P.postNo desc) AS previousname
                  , lag(P.likeCount) over(order by P.postNo desc) AS previouslikeCount
		          , P.postNo, P.fk_employeeNo, P.name, P.subject, P.content, P.readCount, P.regDate
		          , lead(P.postNo) over(order by P.postNo desc) AS nextpostNo
		          , lead(p.subject) over(order by P.postNo desc) AS nextsubject
		          , lead(p.readCount) over(order by P.postNo desc) AS nextreadCount
                  , lead(p.regDate) over(order by P.postNo desc) AS nextregDate
                  , lead(p.name) over(order by P.postNo desc) AS nextname
                  , lead(p.likeCount) over(order by P.postNo desc) AS nextlikeCount
		          , P.fk_boardNo,P.commentCount,P.allowComments,P.isNotice,P.noticeEndDate,P.likeCount
                  ,B.boardName,B.createdBy
                  ,e.profileImg
                  , ps.positionName
		     from tbl_post P
             join tbl_board B
             on P.FK_BOARDNO = B.boardNo
			 join tbl_employee e 
			 on P.fk_employeeNo = e.employeeNo
             JOIN tbl_position ps on e.FK_positionNo = ps.positionNo
		     where p.status = 1
             <if test="checkAll_or_boardGroup == 1"> and B.boardNo=to_number(#{fk_boardNo})</if>
			) V
		WHERE V.postNo = to_number(#{postNo})
	</select>
	
<!--  글 하나의 첨부파일 기존파일명,새로운 파일명 추출 -->
	<select id="getFileOfOnePost" parameterType="HashMap" resultType="PostFileVO">
		select P.postNo,P.fk_boardNo, f.fileNo, f.filename,f.orgfilename,ROUND(F.fileSize / (1024 * 1024), 2) AS fileSize
		from tbl_post P
        join tbl_postFile F
        on p.postNo = f.fk_postNo
		where postNo = to_number(#{postNo})
	</select>
	
	<!-- ===  글조회수 1증가 하기 === -->
   <update id="increase_readCount" parameterType="String">
        update tbl_post set readCount = readCount + 1
        where postNo = to_number(#{postNo})
   </update>

<!-- 등록되어지는 게시글의 번호를 알아오기 위해 -->
	<select id="getInfoPost" resultType="PostVO">
	select postNo, fk_boardNo, fk_employeeNo, name, subject, content,
	               readCount, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate, 
	               commentCount, allowComments, status, isNotice, noticeEndDate
	from tbl_post
	WHERE ROWNUM =1
	order by postNo desc
	</select>

<!--  파일첨부가 있는 글쓰기  // 첨부파일이 있다면 첨부파일테이블(tbl_postFile) 테이블에 파일 정보 삽입  -->
	<insert id="addPostInsertFile" parameterType="map">
      <!-- 원글쓰기인 경우 -->
        insert into tbl_postFile(fileNo, fk_postNo, orgFilename, fileName, fileSize)  
        values(postFileSeq.nextval,to_number(#{postNo}),#{originalFilename}, #{newFileName}, to_number(#{fileSize}))
   </insert>
   
<!-- 실제 첨부파일을 삭제하기위해 첨부파일명을 알아오기. -->
   <resultMap type="HashMap" id="getView_delete_map">
   		<result property="postNo" 			column="postNo" 		javaType="String" />
   		<result property="filename" 		column="filename" 		javaType="String" />
   		<result property="photofilename" 	column="photofilename"  javaType="String" />
   </resultMap>
   <select id="getView_delete" parameterType="String" resultMap="getView_delete_map">
		select postNo, filename, substr(func_post_photo_upload_delete(postNo), 2) AS photofilename
		from tbl_post p
		full join tbl_postFile F
		on p.postNo = F.fk_postNo
		where postNo = to_number(#{postNo})
   </select>
   
   <!-- 1개글 삭제하기-->
   <update id="postDel" parameterType="String">
        update tbl_post set status = 0
        where postNo = to_number(#{postNo})
   </update>
   
   <!-- 1개글 삭제하기 -->
   <update id="postFileDel" parameterType="String">
   		update tbl_postFile set status = 0
        where fk_postNo = to_number(#{postNo})
   </update>
   
<!--    파일다운로드에 필요한 컬럼 추출하기(파일고유번호,새로운파일명,기존파일명) -->
   <select id="getWithFileDownload" parameterType="HashMap" resultType="PostFileVO">
		select postNo, filename, substr(func_post_photo_upload_delete(postNo), 2) AS photofilename,orgFilename
		from tbl_post p
		full join tbl_postFile F
		on p.postNo = F.fk_postNo
		where postNo = to_number(#{postNo}) and fileNo = to_number(#{fileNo})
   </select>
   
<!--    게시글 수정 -->
	<update id="updatePost">
		<choose>
	        <when test="isNotice == 1"> <!-- 공지사항 글로 수정할 경우 -->
				update tbl_post set SUBJECT = #{subject}, CONTENT = #{content}, ALLOWCOMMENTS = to_number(#{allowComments}),
				isNotice = to_number(#{isNotice}),noticeEndDate = #{noticeEndDate}
				where postNo = to_number(#{postNo})
			</when>
			<otherwise>   <!-- 공지사항 글이 아닌 경우 -->
	            update tbl_post set SUBJECT = #{subject}, CONTENT = #{content}, ALLOWCOMMENTS = to_number(#{allowComments}),isNotice=0,noticeEndDate=null
				where postNo = to_number(#{postNo})
	        </otherwise>
        </choose>
	</update>
	
<!-- 	첨부파일 테이블에 파일정보 수정 -->
	<update id="updatePostInsertFile" parameterType="map">
        update tbl_postFile set  orgFilename = #{originalFilename}, fileName = #{newFileName}, fileSize = to_number(#{fileSize})
        where fk_postNo = to_number(#{postNo})
   </update>
   
<!--   updatePostInsertFile 실행 전 해당 행이 있는지 확인하기 위함.	 -->
	<select id="selectTblPostFile" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM tbl_postFile WHERE fk_postNo = to_number(#{postNo})
	</select>
	
<!-- 	글 수정하기에서 postFile 테이블에서 행삭제하기 -->
	<delete id="FileDelOfPostUpdate">
		delete from tbl_postFile
        where fk_postNo = to_number(#{postNo}) and fileNo = to_number(#{fileNo})
	</delete>
	
<!-- 	수정 전 이미지 목록 가져오기 (DB에서 조회) -->
   <select id="getBeforeUpdateFileNames" resultType="String" parameterType="String">
  		select NVL(SUBSTR(func_post_photo_upload_delete(postNo), 2), ' ') AS photofilename
		from tbl_post p
		full join tbl_postFile F
		on p.postNo = F.fk_postNo
		where postNo = to_number(#{postNo})
   </select>
   
<!--    수정 후 새로운 이미지 목록 추출 (db에서 조회) -->
	<select id="getAfterUpdateFileNames" resultType="String" parameterType="String">
  		select NVL(SUBSTR(func_post_photo_upload_delete(postNo), 2), ' ') AS photofilename
		from tbl_post p
		full join tbl_postFile F
		on p.postNo = F.fk_postNo
		where postNo = to_number(#{postNo})
   </select>
   
<!--    게시판 별 게시글 조회 :: 게시판/게시글 테이블 조인 -> 조건 boardNo 인 것만 조회 -->
   <!--    게시글 하나 조회하기(조인함) -->
	<resultMap id="selectPostBoardGroup_Map" type="PostVO">
	 <!-- PostVO의 필드 매핑 -->
	    <result property="postNo" column="postNo"/>
	    <result property="fk_boardNo" column="fk_boardNo"/>
	    <result property="fk_employeeNo" column="fk_employeeNo"/>
	    <result property="name" column="name"/>
	    <result property="subject" column="subject"/>
	    <result property="content" column="content"/>
	    <result property="readCount" column="readCount"/>
	    <result property="regDate" column="regDate"/>
	    <result property="commentCount" column="commentCount"/>
	    <result property="allowComments" column="allowComments"/>
	    <result property="isNotice" column="isNotice"/>
	    <result property="noticeEndDate" column="noticeEndDate"/>
	    <result property="likeCount" column="likeCount"/>
		<result property="currentDate" column="currentDate"/>
		<result property="positionName" column="positionName"/>
	 	<!-- BoardVO의 필드 매핑 -->
	    <association property="boardvo" javaType="BoardVO">
	    	<result property="boardNo" 	column="boardNo"/>
	        <result property="boardName" 	column="boardName"/>
	        <result property="createdBy" 	column="createdBy"/>
	    </association>
	</resultMap>
	<select id="selectPostBoardGroup" resultMap="selectPostBoardGroup_Map" parameterType="map">
		SELECT  
	    V.postNo, V.fk_boardNo, V.fk_employeeNo, V.name, V.subject,V.content, 
	    V.readCount, V.regDate, V.commentCount, V.allowComments,
	    V.isNotice, V.noticeEndDate, V.likeCount,
	    b.boardNo, b.boardName,B.createdBy,sysdate AS currentDate ,
         ps.positionName
	FROM 
	    ( 
	        SELECT row_number() OVER (ORDER BY
             CASE 
                WHEN isNotice = 1 AND noticeEndDate >= CURRENT_DATE THEN 1
                ELSE 2
            END, 
            noticeEndDate ASC,
            postNo DESC ) AS rno, 
	               postNo, fk_boardNo, fk_employeeNo, name, subject, content,
	               readCount, to_char(regDate, 'yyyy-mm-dd') AS regDate, 
	               commentCount, allowComments,  isNotice, noticeEndDate,likeCount
	        FROM tbl_post
	        WHERE status = 1 and fk_boardNo = to_number(#{boardNo})
	    ) V
	JOIN tbl_board b 
    ON V.fk_boardNo = b.boardNo
    join tbl_employee E 
	on v.fk_employeeNo = E.employeeNo
    JOIN tbl_position ps 
    on e.FK_positionNo = ps.positionNo
	WHERE rno BETWEEN to_number(#{startRno}) AND to_number(#{endRno})
	order by rno
	</select>
	
<!-- 	게시판의 정보를 추출하기 위해(게시판명, 운영자 등등) -->
	<select id="getBoardInfo" resultType="BoardVO" parameterType="String">
	select boardName,createdBy,boardDesc,isPublic,createdAt
	from tbl_board
	where boardNo = to_number(#{boardNo})
	</select>
   
<!--    좋아요 테이블에서 로그인된 사원이 해당 게시글에 좋아요를 했는지 조회 -->
   <select id="getLikeInfo" parameterType="String" resultType="LikeVO">
   select * from tbl_like
   where fk_employeeno = to_number(#{login_userid}) and fk_postNo = to_number(#{postNo})
   </select>
   
<!--    좋아요 테이블에서 행 삭제(좋아요 삭제) -->
   <delete id="removeLike">
  	delete from tbl_like
  	where fk_employeeno = to_number(#{login_userid}) and fk_postNo = to_number(#{postNo})
   </delete>
   
<!--    좋아요 테이블에서 행 추가(좋아요 추가) -->
	<insert id="addLike">
	insert into tbl_like (likeno,fk_postno,fk_employeeno,regdate) values(likeSeq.nextval,to_number(#{postNo}),to_number(#{login_userid}),sysdate)
	</insert>

<!-- 	게시글테이블의 좋아요 수 누적 -->
	<update id="updatePostLikeCnt">
		update tbl_post set likeCount = likeCount + 1
		where postNo = to_number(#{postNo})
	</update>

<!-- 	게시글테이블의 좋아요 수 차감 -->	
	<update id="updatePostLikeMinusCnt">
	update tbl_post set likeCount = likeCount - 1
	where postNo = to_number(#{postNo})
	</update>

<!-- 로그인 된 사원이 해당 게시글에 좋아요 여부를 검사 -->
	<select id="checkLike" parameterType="String" resultType="int">
	select COUNT(*)  from tbl_like 
	where fk_postNo = to_number(#{postNo}) and fk_employeeno = to_number(#{login_userid})
	</select>
	
<!-- 	차감된 게시글의 좋아요 수 -->
	<select id="likeCnt" parameterType="String" resultType="int">
	select likeCount  from tbl_post 
	where postNo = to_number(#{postNo})
	</select>

<!-- 로그인한 사원이 좋아요한 게시글 조회 -->
	<select id="getLikedPosts" parameterType="map" resultType="int">
    select fk_postNo from tbl_like
    where fk_employeeNo = to_number(#{login_userid})
	</select>
	
<!-- 	좋아요 누른 사람(사원) 조회 -->
	<select id="getLikeList" parameterType="String" resultType="map">
	SELECT fk_employeeNo, E.name, TO_CHAR(regDate, 'YYYY-MM-DD HH24:MI:SS') AS regDate
	FROM tbl_like L 
	JOIN tbl_employee E
	on L.fk_employeeNo = E.employeeNo
	where fk_postNo = to_number(#{postNo})
	order by regDate desc
	</select>

<!-- 댓글등록 -->
	<insert id="insertComment">
	insert into tbl_comment (COMMENTNO,FK_POSTNO,FK_EMPLOYEENO,NAME,CONTENT,GROUPNO) 
	values(commentSeq.nextval,to_number(#{postNo}),to_number(#{login_userid}),#{login_name},#{commentContent},commentSeq.currval)
	</insert>
	
<!-- 	해당 게시글의 댓글 조회 -->
	<resultMap type="HashMap" id="getComment_map">
		<result property="commentNo" 	 column="commentNo"  	javaType="String" />
   		<result property="name" 		 column="name" 			javaType="String" />
   		<result property="content" 		 column="content" 		javaType="String" />
   		<result property="regDate" 		 column="regDate"  		javaType="String" />
   		<result property="fk_postNo" 	 column="fk_postNo"  	javaType="String" />
   		<result property="fk_employeeNo" column="fk_employeeNo" javaType="String" />
   		<result property="groupNo" 		 column="groupNo" 		javaType="String" />
   		<result property="fk_commentNo"  column="fk_commentNo"  javaType="String" />
   		<result property="depthNo" 	   	 column="depthNo"  		javaType="String" />
   		<result property="profileImg"    column="profileImg"    javaType="String"/>
   		<result property="fileName"    column="fileName"    javaType="String"/>
   		<result property="positionName"    column="positionName"    javaType="String"/>
   </resultMap>
	<select id="getComment" parameterType="map" resultMap="getComment_map">
    SELECT * FROM (
        SELECT A.*, ROWNUM AS RNUM 
        FROM (
            SELECT 
                C.commentNo, C.fk_postNo, C.fk_employeeNo, C.name, 
                C.content, C.regDate, C.groupNo, C.fk_commentNo, C.depthNo, 
                E.profileImg,E.fileName, ps.positionName
            FROM tbl_comment C
            JOIN tbl_employee E ON C.fk_employeeNo = E.employeeNo
            JOIN tbl_position ps ON E.FK_positionNo = ps.positionNo
            WHERE C.fk_postNo = #{postNo} AND C.status = 1
            ORDER BY C.groupNo desc, C.commentNo ASC
        ) A
        WHERE ROWNUM &lt;= to_number(#{end}) 
    )
    WHERE RNUM &gt;= to_number(#{start})
</select>

	
	
<!-- 	댓글 수정하기 -->
	<update id="updateComment">
	update tbl_comment set content=#{content},regdate = sysdate
	where commentNo = to_number(#{commentNo})
	</update>
	
<!-- 	대댓글 등록 -->
	<insert id="insertReComment">
	insert into tbl_comment (COMMENTNO,FK_POSTNO,FK_EMPLOYEENO,NAME,CONTENT,GROUPNO,fk_commentNo,depthNo) 
	values(commentSeq.nextval,to_number(#{postNo}),to_number(#{login_userid}),#{login_name},#{replyContent},to_number(#{fk_commentNo}),
	to_number(#{fk_commentNo}),to_number(#{depthNo}))
	</insert>
	
<!-- 	댓글 삭제하기 -->
	<update id="deleteComment" parameterType="String">
	 update tbl_comment set status=0
	 where groupNo = to_number(#{commentNo})
	</update>
		
<!-- 	대댓글 삭제의 경우 -->
	<update id="deleteReComment">
	update tbl_comment set status=0
	where commentNo = to_number(#{commentNo})
	</update>
	
<!-- 	댓글 개수  -->
	<select id="getCommentCount" parameterType="String" resultType="int">
	select count(fk_postNo)
	from tbl_comment
	where fk_postno = to_number(#{postNo}) and status = 1
	</select>
	
<!-- 	해당 게시글의 댓글 개수 증감하기 -->
	<select id="addCommentCount" parameterType="String">
	update tbl_post set commentCount = commentCount+1
	where postNo = to_number(#{postNo})
	</select>
	
<!-- 	부서별 공개일 경우 게시판 생성하기 -->
	<insert id="addDepartmentBoard">
    insert into tbl_board_department (fk_boardNo, fk_departmentNo)
	    select boardNo, to_number(#{deptNo}) 
	    from tbl_board 
    where boardNo = (select MAX(boardNo) FROM tbl_board)
	</insert>
	
<!-- 	게시글 삭제 시 해당 게시글의 댓글 삭제(상태값 변경)하기 -->
	<update id="delCommentOfPost">
	update tbl_comment set status=0
	where fk_postNo = to_number(#{postNo}) and status=1
	</update>
	
<!-- 	수정하는 게시판에 접근할 수 있는 부서를 알아옴 -->
	<resultMap type="HashMap" id="getboardAccessList_map">
		<result property="fk_boardNo" 	 column="fk_boardNo"  	javaType="String" />
		<result property="departmentName" 		 column="departmentName" 			javaType="String" />
   		<result property="fk_departmentNo" 		 column="fk_departmentNo" 			javaType="String" />
   </resultMap>
	<select id="getboardAccessList" parameterType="String" resultMap="getboardAccessList_map">
	select d.departmentName,fk_boardNo,fk_departmentNo 
	from tbl_board_department bd
	join tbl_department d
	on d.departmentNo = bd.fk_departmentNo
	where fk_boardNo = to_number(#{boardNo})
	</select>
	
<!-- 	부서별 공개일 경우 권한이 부여된 부서 모두 삭제 -->
	<delete id="deleteDepartmentBoard">
	delete from tbl_board_department
	where fk_boardNo = to_number(#{boardNo})
	</delete>
	
<!-- 	부서별 공개일 경우 게시판 삭제후 insert하기 -->
	<insert id="addDepartmentBoard_2">
    insert into tbl_board_department (fk_boardNo, fk_departmentNo) values(to_number(#{boardNo}),to_number(#{deptNo}))
	</insert>
	
	<update id="delPostOfBoard">
	<!-- 게시판 내 모든 게시글 상태값 변경 -->
    update tbl_post 
    set status = 0, commentCount = 0
    where fk_boardNo = to_number(#{boardNo})
	</update>
	
	<update id="delCommentOfBoard">
	<!-- 해당 게시판 내 모든 게시글의 댓글 상태값 변경 -->
    update tbl_comment 
    set status = 0 
    where fk_postNo IN (
        select postNo from tbl_post where fk_boardNo = to_number(#{boardNo})
    )
	</update>
	
<!-- 	좋아요 상위 5개 글 -->
	<resultMap type="HashMap" id="getTopLikedPosts_map">
		<result property="postNo" 	 	 column="postNo"  			javaType="String" />
		<result property="subject" 		 column="subject" 			javaType="String" />
   		<result property="regDate" 		 column="regDate" 			javaType="String" />
   </resultMap>
	<select id="getTopLikedPosts" resultMap="getTopLikedPosts_map">
	select postNo
   	 	   ,case when length(subject) &lt; 11 then subject 
			else substr(subject, 1, 11)||'..' end AS subject
			,to_char(regDate,'yyyy-mm-dd') as regDate from (
    select p.*, ROWNUM AS rn
    from (select * FROM tbl_post where status = 1 order by likecount DESC) p
    where rownum &lt;= 5
	)
	</select>
	
<!-- 	조회수 상위 5개 글 -->
	<resultMap type="HashMap" id="getTopReadPosts_map">
		<result property="postNo" 	 	 column="postNo"  			javaType="String" />
		<result property="subject" 		 column="subject" 			javaType="String" />
	  	<result property="regDate" 		 column="regDate" 			javaType="String" />
   </resultMap>
	<select id="getTopReadPosts" resultMap="getTopReadPosts_map">
	select postNo
			,case when length(subject) &lt; 11 then subject 
				else substr(subject, 1, 11)||'..' end AS subject
			,to_char(regDate,'yyyy-mm-dd') as regDate from (
    select p.*, ROWNUM AS rn
    from (select * from tbl_post where status = 1 order by readCount DESC) p
    where rownum &lt;= 5
	)
	</select>
	
<!-- 	삭제된 행의 개수만큼 해당 게시글의 댓글개수를 차감 -->
	<update id="updateMinusCommentCount">
	update tbl_post set commentCount = commentCount - #{deleteCount}
	where postNo = to_number(#{postNo})
	</update>
	
<!-- 	알림을 받을 사원 번호를 추출 -->
	<select id="getNotificationReceiverEmployeeNo" parameterType="String" resultType="String">
	select fk_employeeNo from tbl_comment
	where commentNo = to_number(#{fk_commentNo})
	</select>
	
<!-- 	알림 테이블에 데이터 삽입 -->
	<insert id="insertNotificationInfo" parameterType="String">
    <choose>
        <when test="notificationtype == 'reply'"> <!-- 대댓글 작성 -->
            insert into tbl_notification (notificationNo, fk_employeeNo, fk_postNo, fk_commentNo, senderEmployeeNo, message, notificationtype, isRead)
            values(notificationSeq.nextval, to_number(#{fk_employeeNo}), to_number(#{postNo}), to_number(#{fk_commentNo}), to_number(#{login_userid}), 
            #{commentContent}, #{notificationtype}, default)
        </when>
        <when test="notificationtype == 'like'"> <!-- 좋아요 클릭 -->
            insert into tbl_notification (notificationNo, fk_employeeNo, fk_postNo, senderEmployeeNo, notificationtype, isRead)
            values(notificationSeq.nextval, to_number(#{fk_employeeNo}), to_number(#{postNo}), to_number(#{login_userid}), #{notificationtype}, default)
        </when>
        <otherwise> <!-- 일반 댓글 작성 -->
            insert into tbl_notification (notificationNo, fk_employeeNo, fk_postNo, senderEmployeeNo, message, notificationtype, isRead)
            values(notificationSeq.nextval, to_number(#{fk_employeeNo}), to_number(#{postNo}), to_number(#{login_userid}), #{commentContent}, #{notificationtype}, default)
        </otherwise>
    </choose>
</insert>

	
<!-- 	로그인된 사원번호로 읽지않은 해당 알림 조회 -->
	<select id="loadNotification" parameterType="String" resultType="NotificationVO">
	select E.name, 
			N.notificationNo, N.fk_employeeNo, N.fk_postNo, N.fk_commentNo, N.senderEmployeeNo, 
			P.fk_boardNo AS boardNo,
			P.fk_employeeNo as postCreateBy, <!-- 글의 글쓴이 -->
		    sender_emp.fk_positionno AS senderPostionNo,   <!-- 알림 보내는 사원번호 -->
		    sender_emp.name as senderName,      
		    sender_emp.profileimg, 
		    sender_emp.fileName,
    		P.positionname AS senderPositionName,          
		    N.message, 
		    N.notificationType, 
		    N.isRead, 
		    N.createdAt,
		    case 
		        when (sysdate - N.createdat) * 24 &lt; 1 then floor((sysdate - N.createdat) * 24 * 60) || '분 전'
		        when (sysdate - N.createdat) * 24 &lt; 24 then floor((sysdate - N.createdat) * 24) || '시간 전'
		        else floor((sysdate - N.createdat)) || '일 전'
		    end as timeAgo
	from tbl_notification N
	join tbl_employee E 
	    on N.fk_employeeno = E.employeeno
	join tbl_employee sender_emp  <!-- senderemployeeNo를 통해 tbl_employee에 다시 조인-->
	    on N.senderemployeeno = sender_emp.employeeNo
	join tbl_position P  
    on sender_emp.fk_positionNo = P.positionNo
    join tbl_post P 
    on N.fk_postNo = P.postNo
	join tbl_board B
    on P.fk_boardNo = B.boardNo
	where N.fk_employeeNo = to_number(#{login_userid}) and N.isRead = 0
	order by N.notificationNo DESC
	</select>

	<!-- 클릭 된 알림을 0(안읽음)에서 1(읽음)으로 상태 변경 -->
	<update id="notificationIsRead" parameterType="String">
	update tbl_notification set isread = 1
	where notificationNo = to_number(#{notificationNo})
	</update>

<!-- 댓글 상위 5개 글  -->
	<resultMap type="HashMap" id="getTopCommentPosts_map">
		<result property="postNo" 	 	 column="postNo"  			javaType="String" />
		<result property="subject" 		 column="subject" 			javaType="String" />
   		<result property="regDate" 		 column="regDate" 			javaType="String" />
   </resultMap>
	<select id="getTopCommentPosts" resultMap="getTopCommentPosts_map">
	select postNo
   	 	   ,case when length(subject) &lt; 11 then subject 
			else substr(subject, 1, 11)||'..' end AS subject
			,to_char(regDate,'yyyy-mm-dd') as regDate from (
    select p.*, ROWNUM AS rn
    from (select * FROM tbl_post where status = 1 order by commentCount DESC) p
    where rownum &lt;= 5
	)
	</select>
	
<!-- 	알림의 전체읽기 클릭 시 알림을 모두 읽음 처리 -->
	<update id="goNotificationReadAll" parameterType="String">
	update tbl_notification set isRead = 1
	where fk_employeeNo = to_number(#{login_userid})
	</update>





	<!-- 메인페이지에 뿌릴 tbl_board 조회 -->
	<select id="selectAllPostMain" resultMap="selectPostBoardGroup_Map" parameterType="map">
		SELECT 
		    V.postNo, V.fk_boardNo, V.fk_employeeNo, V.name, 
			case when length( V.subject) &gt; 40 then substr(subject, 0, 40) || '...' else subject end as subject, 
			CASE 
		        WHEN LENGTH(REGEXP_REPLACE(V.content, '&lt;[^&gt;]*&gt;', '')) &gt; 80 
		        THEN SUBSTR(REGEXP_REPLACE(V.content, '&lt;[^&gt;]*&gt;', ''), 1, 80) || '...' 
		        ELSE REGEXP_REPLACE(V.content,'&lt;[^&gt;]*&gt;', '') 
		    END AS content, 
		    V.readCount, V.regDate, V.commentCount, V.allowComments,
		    V.isNotice, V.noticeEndDate, V.likeCount,
		    V.boardNo, V.boardName, V.createdBy, V.currentDate,
		    V.positionName
		FROM (
		    SELECT  
		        P.postNo, P.fk_boardNo, P.fk_employeeNo, P.name, P.subject, P.content, 
		        P.readCount, P.regDate, P.commentCount, P.allowComments,
		        P.isNotice, P.noticeEndDate, P.likeCount,
		        B.boardNo, B.boardName, B.createdBy, 
		        SYSDATE AS currentDate,
		        PS.positionName,
		        ROW_NUMBER() OVER (ORDER BY P.postNo DESC) AS rno
		    FROM tbl_post P
		    JOIN tbl_board B ON P.fk_boardNo = B.boardNo
		    JOIN tbl_employee E ON P.fk_employeeNo = E.employeeNo
		    JOIN tbl_position PS ON E.FK_positionNo = PS.positionNo
		) V
		WHERE V.rno BETWEEN to_number(#{startRno}) AND to_number(#{endRno})
	</select>



	<select id="searchBoard" parameterType="String" resultMap="selectPostBoardGroup_Map">
		SELECT 
		    V.postNo, V.fk_boardNo, V.fk_employeeNo, V.name, 
			case when length( V.subject) &gt; 40 then substr(subject, 0, 40) || '...' else subject end as subject, 
			CASE 
		        WHEN LENGTH(REGEXP_REPLACE(V.content, '&lt;[^&gt;]*&gt;', '')) > 80 
		        THEN SUBSTR(REGEXP_REPLACE(V.content, '&lt;[^&gt;]*&gt;', ''), 1, 80) || '...' 
		        ELSE REGEXP_REPLACE(V.content,'&lt;[^&gt;]*&gt;', '') 
		    END AS content, 
		    V.readCount, V.regDate, V.commentCount, V.allowComments,
		    V.isNotice, V.noticeEndDate, V.likeCount,
		    V.boardNo, V.boardName, V.createdBy, V.currentDate,
		    V.positionName
		FROM (
		    SELECT  
		        P.postNo, P.fk_boardNo, P.fk_employeeNo, P.name, P.subject, P.content, 
		        P.readCount, P.regDate, P.commentCount, P.allowComments,
		        P.isNotice, P.noticeEndDate, P.likeCount,
		        B.boardNo, B.boardName, B.createdBy, 
		        SYSDATE AS currentDate,
		        PS.positionName,
		        ROW_NUMBER() OVER (ORDER BY P.postNo DESC) AS rno
		    FROM tbl_post P
		    JOIN tbl_board B ON P.fk_boardNo = B.boardNo
		    JOIN tbl_employee E ON P.fk_employeeNo = E.employeeNo
		    JOIN tbl_position PS ON E.FK_positionNo = PS.positionNo
		) V
		 WHERE lower(subject) like '%'||lower(#{searchWord})||'%' 
	</select>




</mapper>









