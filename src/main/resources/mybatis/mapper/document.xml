<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<mapper namespace="com.spring.app.document.model.DocumentDAO">
	
	
	<!-- 메인 페이지에서 보여줄 결재 대기 문서 5개 가져오기 -->
	<select id="mainTodoList" parameterType="String" resultType="DocumentVO">
		select fk_employeeNo, subject, draftDate, documentType, name, documentNo, positionname, urgent
		from
		(
		    select rownum, fk_documentNo, fk_employeeNo, subject, to_char(draftDate, 'yyyy-mm-dd') as draftDate, documentType, name, documentNo, positionname, urgent
		    from
		    (
		        select fk_approver, fk_documentNo, ROW_NUMBER() OVER(PARTITION BY fk_documentNo ORDER BY approvalOrder DESC) AS rn
		        from tbl_approval
		        where APPROVALSTATUS = 0
		    ) A JOIN tbl_document D
		    ON fk_documentNo = documentNo
		    JOIN tbl_employee
		    ON fk_employeeNo = employeeNo
		    JOIN tbl_position
		    ON fk_positionno = positionno
		    where rn = 1 and fk_approver = to_number(#{employeeNo}) and temp = 0 and D.status != 2
		    order by urgent desc, documentNo desc
		)
		where rownum between 1 and 5
	</select>
	
	
	<!-- 메인 페이지에서 보여줄 기안 진행 문서 5개 가져오기 -->
	<select id="mainProgressList" parameterType="String" resultType="DocumentVO">
		select documentNo, subject, documentType, to_char(draftDate, 'yyyy-mm-dd') as draftDate, status, urgent
		from
		(
		    select rownum as rn, documentNo, subject, documentType, draftDate, status, urgent
		    from tbl_document
		    where fk_employeeNo = to_number(#{employeeNo}) and status = 0 and temp = 0
		    order by documentNo desc
		)
		where rn BETWEEN 1 AND 5
	</select>
	
	
	<!-- 메인 페이지에서 보여줄 기안 완료 문서 5개 가져오기 -->
	<select id="mainCompletedList" parameterType="String" resultType="DocumentVO">
		select documentNo, subject, documentType, to_char(draftDate, 'yyyy-mm-dd') as draftDate, status, urgent, to_char(approvalDate, 'yyyy-mm-dd') as approvalDate
		from
		(
		    select rownum as rn, documentNo, subject, documentType, draftDate, status, urgent, approvalDate
		    from tbl_document
		    where fk_employeeNo = to_number(#{employeeNo}) and status = 1 and temp = 0
		    order by documentNo desc
		)
		where rn BETWEEN 1 AND 5
	</select>
	
	
	<!-- 결재 대기 문서 리스트 가져오기 -->
	<select id="todoList" parameterType="String" resultType="DocumentVO">
		select approvalNo, fk_approver, fk_documentNo, approvalOrder, fk_employeeNo, subject, to_char(draftDate, 'yyyy-mm-dd') as draftDate, documentType, name, documentNo, urgent
		from
		(
		    select approvalNo, fk_approver, fk_documentNo, approvalOrder, ROW_NUMBER() OVER(PARTITION BY fk_documentNo ORDER BY approvalOrder DESC) AS rn
		    from tbl_approval
		    where APPROVALSTATUS = 0
		) A JOIN tbl_document D
		ON fk_documentNo = documentNo
		JOIN tbl_employee
		ON fk_employeeNo = employeeNo
		where rn = 1 and fk_approver = to_number(#{employeeNo}) and temp = 0 and D.status != 2
		order by urgent desc, documentNo desc
	</select>
	
	
	<!-- 결재 예정 문서 리스트 가져오기 -->
	<select id="upcomingList" parameterType="String" resultType="DocumentVO">
		select approvalNo, fk_approver, fk_documentNo, approvalOrder, fk_employeeNo, subject, to_char(draftDate, 'yyyy-mm-dd') as draftDate, documentType, name, documentNo, urgent
		from
		(
		    select approvalNo, fk_approver, fk_documentNo, approvalOrder, ROW_NUMBER() OVER(PARTITION BY fk_documentNo ORDER BY approvalOrder DESC) AS rn
		    from tbl_approval
		    where APPROVALSTATUS = 0
		) A JOIN tbl_document
		ON fk_documentNo = documentNo
		JOIN tbl_employee
		ON fk_employeeNo = employeeNo
		where rn != 1 and fk_approver = to_number(#{employeeNo}) and temp = 0
		order by urgent desc, documentNo desc
	</select>
	
	
	<!-- 결재 대기 문서함에서 검색어를 포함한 문서 갯수 가져오기 -->
	<select id="todoListCount_Search" parameterType="HashMap" resultType="Integer">
		select count(*)
		from
		(
		    select approvalNo, fk_approver, fk_documentNo, approvalOrder, ROW_NUMBER() OVER(PARTITION BY fk_documentNo ORDER BY approvalOrder DESC) AS rn
		    from tbl_approval
		    where APPROVALSTATUS = 0
		) A JOIN tbl_document D
		ON fk_documentNo = documentNo
		JOIN tbl_employee
		ON fk_employeeNo = employeeNo
		where rn = 1 and fk_approver = to_number(#{employeeNo}) and temp = 0 and D.status != 2
		<choose>
			<when test='searchWord != ""'> and lower(subject) like '%'||lower(#{searchWord})||'%' </when>
		</choose>
		<choose>
			<when test='documentType != ""'> and documentType = #{documentType} </when>
		</choose>
	</select>
	
	
	<!-- 결재 대기 문서함에서 검색어를 포함한 페이징 처리한 문서 리스트 가져오기 -->
	<select id="todoList_Search_Paging" parameterType="HashMap" resultType="DocumentVO">
		select approvalNo, fk_approver, fk_documentNo, approvalOrder, fk_employeeNo, subject
			 , draftDate, documentType, name, documentNo, urgent
		from
		(
			select rownum as rno, approvalNo, fk_approver, fk_documentNo, approvalOrder, fk_employeeNo, subject
				 , draftDate, documentType, name, documentNo, urgent
			from
			(
				select approvalNo, fk_approver, fk_documentNo, approvalOrder, fk_employeeNo, subject, to_char(draftDate, 'yyyy-mm-dd') as draftDate, documentType, name, documentNo, urgent
				from
				(
				    select approvalNo, fk_approver, fk_documentNo, approvalOrder, ROW_NUMBER() OVER(PARTITION BY fk_documentNo ORDER BY approvalOrder DESC) AS rn
				    from tbl_approval
				    where APPROVALSTATUS = 0
				) A JOIN tbl_document D
				ON fk_documentNo = documentNo
				JOIN tbl_employee
				ON fk_employeeNo = employeeNo
				where rn = 1 and fk_approver = to_number(#{employeeNo}) and temp = 0 and D.status != 2
				<choose>
					<when test='searchWord != ""'> and lower(subject) like '%'||lower(#{searchWord})||'%' </when>
				</choose>
				<choose>
					<when test='documentType != ""'> and documentType = #{documentType} </when>
				</choose>
				order by urgent desc, documentNo desc
			)
		)
		WHERE rno BETWEEN to_number(#{startRno}) AND to_number(#{endRno})
	</select>
	
	
	<!-- 결재 예정 문서함에서 검색어를 포함한 문서 갯수 가져오기 -->
	<select id="upcomingListCount_Search" parameterType="HashMap" resultType="Integer">
		select count(*)
		from
		(
		    select approvalNo, fk_approver, fk_documentNo, approvalOrder, ROW_NUMBER() OVER(PARTITION BY fk_documentNo ORDER BY approvalOrder DESC) AS rn
		    from tbl_approval
		    where APPROVALSTATUS = 0
		) A JOIN tbl_document
		ON fk_documentNo = documentNo
		JOIN tbl_employee
		ON fk_employeeNo = employeeNo
		where rn != 1 and fk_approver = to_number(#{employeeNo}) and temp = 0
		<choose>
			<when test='searchWord != ""'> and lower(subject) like '%'||lower(#{searchWord})||'%' </when>
		</choose>
		<choose>
			<when test='documentType != ""'> and documentType = #{documentType} </when>
		</choose>
	</select>
	
	
	<!-- 결재 예정 문서함에서 검색어를 포함한 페이징 처리한 문서 리스트 가져오기 -->
	<select id="upcomingList_Search_Paging" parameterType="HashMap" resultType="DocumentVO">
		select approvalNo, fk_approver, fk_documentNo, approvalOrder, fk_employeeNo, subject, draftDate, documentType, name, documentNo, urgent
		from
		(
			select rownum as rno, approvalNo, fk_approver, fk_documentNo, approvalOrder, fk_employeeNo, subject, draftDate, documentType, name, documentNo, urgent
			from
			(
				select approvalNo, fk_approver, fk_documentNo, approvalOrder, fk_employeeNo, subject, to_char(draftDate, 'yyyy-mm-dd') as draftDate, documentType, name, documentNo, urgent
				from
				(
				    select approvalNo, fk_approver, fk_documentNo, approvalOrder, ROW_NUMBER() OVER(PARTITION BY fk_documentNo ORDER BY approvalOrder DESC) AS rn
				    from tbl_approval
				    where APPROVALSTATUS = 0
				) A JOIN tbl_document
				ON fk_documentNo = documentNo
				JOIN tbl_employee
				ON fk_employeeNo = employeeNo
				where rn != 1 and fk_approver = to_number(#{employeeNo}) and temp = 0
				<choose>
					<when test='searchWord != ""'> and lower(subject) like '%'||lower(#{searchWord})||'%' </when>
				</choose>
				<choose>
					<when test='documentType != ""'> and documentType = #{documentType} </when>
				</choose>
				order by urgent desc, documentNo desc
			)
		)
		WHERE rno BETWEEN to_number(#{startRno}) AND to_number(#{endRno})
	</select>
	
	
	<!-- 기안 문서함에서 검색어를 포함한 문서 갯수 가져오기 -->
	<select id="myDocumentListCount_Search" parameterType="HashMap" resultType="Integer">
		select count(*)
		from tbl_document
		where fk_employeeNo = to_number(#{employeeNo}) and temp = 0
		<choose>
			<when test='searchWord != ""'> and lower(subject) like '%'||lower(#{searchWord})||'%' </when>
		</choose>
		<choose>
			<when test='status != ""'> and status = to_number(#{status}) </when>
		</choose>
		<choose>
			<when test='documentType != ""'> and documentType = #{documentType} </when>
		</choose>
	</select>
	
	
	<!-- 기안 문서함에서 검색어를 포함한 페이징 처리한 문서 리스트 가져오기 -->
	<select id="myDocumentList_Search_Paging" parameterType="HashMap" resultType="DocumentVO">
		select documentNo, subject, documentType, draftDate, status, approvalDate, urgent
		from
		(
			select rownum AS rno, documentNo, subject, documentType, draftDate, status, approvalDate, urgent
			from
			(
				select documentNo, subject, documentType, to_char(draftDate, 'yyyy-mm-dd') as draftDate, status, urgent, nvl(to_char(approvalDate, 'yyyy-mm-dd'), '-') as approvalDate
				from tbl_document
				where fk_employeeNo = to_number(#{employeeNo}) and temp = 0
				<choose>
					<when test='searchWord != ""'> and lower(subject) like '%'||lower(#{searchWord})||'%' </when>
				</choose>
				<choose>
					<when test='status != ""'> and status = to_number(#{status}) </when>
				</choose>
				<choose>
					<when test='documentType != ""'> and documentType = #{documentType} </when>
				</choose>
				order by documentNo desc
			)
		)
		WHERE rno BETWEEN to_number(#{startRno}) AND to_number(#{endRno})
	</select>
	
	
	<!-- 임시 저장 문서함에서 검색어를 포함한 문서 갯수 가져오기 -->
	<select id="tempListCount_Search" parameterType="HashMap" resultType="Integer">
		select count(*)
		from tbl_document
		where fk_employeeNo = to_number(#{employeeNo}) and temp = 1
		<choose>
			<when test='searchWord != ""'> and lower(subject) like '%'||lower(#{searchWord})||'%' </when>
		</choose>
		<choose>
			<when test='documentType != ""'> and documentType = #{documentType} </when>
		</choose>
	</select>
	
	
	<!-- 임시 저장 문서함에서 검색어를 포함한 페이징 처리한 문서 리스트 가져오기 -->
	<select id="tempList_Search_Paging" parameterType="HashMap" resultType="DocumentVO">
		select documentNo, subject, documentType, draftDate, status, urgent
		from
		(
			select rownum as rno, documentNo, subject, documentType, draftDate, status, urgent
			from
			(
				select documentNo, subject, documentType, to_char(draftDate, 'yyyy-mm-dd') as draftDate, status, urgent
				from tbl_document
				where fk_employeeNo = to_number(#{employeeNo}) and temp = 1
				<choose>
					<when test='searchWord != ""'> and lower(subject) like '%'||lower(#{searchWord})||'%' </when>
				</choose>
				<choose>
					<when test='documentType != ""'> and documentType = #{documentType} </when>
				</choose>
				order by documentNo desc
			)
		)
		WHERE rno BETWEEN to_number(#{startRno}) AND to_number(#{endRno})
	</select>
	
	
	<!-- 결재 문서함에서 검색어를 포함한 문서 갯수 가져오기 -->
	<select id="approvedtListCount_Search" parameterType="HashMap" resultType="Integer">
		select count(*)	
		from
		(
		    select approvalNo, fk_approver, fk_documentNo, approvalOrder
		    from tbl_approval
		    where APPROVALSTATUS != 0 and fk_approver = to_number(#{employeeNo})
		) A JOIN tbl_document D
		ON fk_documentNo = documentNo
		where temp = 0
		<choose>
			<when test='searchWord != ""'> and lower(subject) like '%'||lower(#{searchWord})||'%' </when>
		</choose>
		<choose>
			<when test='status != ""'> and status = to_number(#{status}) </when>
		</choose>
		<choose>
			<when test='documentType != ""'> and documentType = #{documentType} </when>
		</choose>
	</select>
	
	
	<!-- 결재 문서함에서 검색어를 포함한 페이징 처리한 문서 리스트 가져오기 -->
	<select id="approvedList_Search_Paging" parameterType="HashMap" resultType="DocumentVO">
		select approvalNo, fk_approver, fk_documentNo, approvalOrder, fk_employeeNo, subject, draftDate
			 , documentType, name, documentNo, approvalDate , status, urgent
		from
		(
			select rownum as rno, approvalNo, fk_approver, fk_documentNo, approvalOrder, fk_employeeNo, subject, draftDate
				 , documentType, name, documentNo, approvalDate , status, urgent
			from
			(
				select approvalNo, fk_approver, fk_documentNo, approvalOrder, fk_employeeNo, subject, to_char(draftDate, 'yyyy-mm-dd') as draftDate
					 , documentType, name, documentNo, to_char(approvalDate, 'yyyy-mm-dd') as approvalDate , D.status as status, urgent
				from
				(
				    select  approvalNo, fk_approver, fk_documentNo, approvalOrder
				    from tbl_approval
				    where APPROVALSTATUS != 0 and fk_approver = to_number(#{employeeNo})
				) A JOIN tbl_document D
				ON fk_documentNo = documentNo
				JOIN tbl_employee
				ON fk_employeeNo = employeeNo
				where temp = 0
				<choose>
					<when test='searchWord != ""'> and lower(subject) like '%'||lower(#{searchWord})||'%' </when>
				</choose>
				<choose>
					<when test='status != ""'> and D.status = to_number(#{status}) </when>
				</choose>
				<choose>
					<when test='documentType != ""'> and documentType = #{documentType} </when>
				</choose>
				order by D.documentNo desc
			)
		)
		WHERE rno BETWEEN to_number(#{startRno}) AND to_number(#{endRno})
	</select>
	
	
	<!-- 부서 문서함에서 검색어를 포함한 문서 갯수 가져오기 -->
	<select id="deptDocumentListCount_Search" parameterType="HashMap" resultType="Integer">
		select count(*)
		from
		(
		    select employeeNo, name
		    from
		        (
		            select fk_departmentno
		            from tbl_employee
		            where employeeNo = to_number(#{employeeNo})
		        ) E1 JOIN tbl_employee E2
		    ON E1.fk_departmentNo = E2.fk_departmentno
		) E JOIN tbl_document D
		ON E.employeeNO = D.fk_employeeNo
		where temp = 0
		<choose>
			<when test='searchWord != ""'> and lower(subject) like '%'||lower(#{searchWord})||'%' </when>
		</choose>
		<choose>
			<when test='status != ""'> and status = to_number(#{status}) </when>
		</choose>
		<choose>
			<when test='documentType != ""'> and documentType = #{documentType} </when>
		</choose>
	</select>
	
	
	<!-- 부서 문서함에서 검색어를 포함한 페이징 처리한 문서 리스트 가져오기 -->
	<select id="deptDocumentList_Search_Paging" parameterType="HashMap" resultType="DocumentVO">
		select documentNo, subject, documentType, draftDate, status, name, approvalDate, urgent
		from
		(
			select rownum as rno, documentNo, subject, documentType, draftDate, status, name, approvalDate, urgent
			from
			(
				select documentNo, subject, documentType, to_char(draftDate, 'yyyy-mm-dd') as draftDate, status, name
					 , nvl(to_char(approvalDate, 'yyyy-mm-dd'), '-') as approvalDate, urgent
				from
				(
				    select employeeNo, name
				    from
				        (
				            select fk_departmentno
				            from tbl_employee
				            where employeeNo = to_number(#{employeeNo})
				        ) E1 JOIN tbl_employee E2
				    ON E1.fk_departmentNo = E2.fk_departmentno
				) E JOIN tbl_document D
				ON E.employeeNO = D.fk_employeeNo
				where temp = 0
				<choose>
					<when test='searchWord != ""'> and lower(subject) like '%'||lower(#{searchWord})||'%' </when>
				</choose>
				<choose>
					<when test='status != ""'> and status = to_number(#{status}) </when>
				</choose>
				<choose>
					<when test='documentType != ""'> and documentType = #{documentType} </when>
				</choose>
				order by D.documentNo desc
			)
		)
		WHERE rno BETWEEN to_number(#{startRno}) AND to_number(#{endRno})
	</select>
	
	
	<!-- 문서함에서 문서 1개 보여주기 -->
	<resultMap type="HashMap" id="documentView_Map">
		<result column="documentNo"			property="documentNo"			javaType="String" />
		<result column="fk_employeeNo"		property="fk_employeeNo"		javaType="String" />
		<result column="subject"			property="subject"				javaType="String" />
		<result column="draftDate"			property="draftDate"			javaType="String" />
		<result column="status"				property="status"				javaType="String" />
		<result column="securityLevel"		property="securityLevel"		javaType="String" />
		<result column="temp"				property="temp"					javaType="String" />
		<result column="documentType"		property="documentType"			javaType="String" />
		<result column="urgent"				property="urgent"				javaType="String" />
		<result column="approvalDate"		property="approvalDate"			javaType="String" />
		<result column="name"				property="name"					javaType="String" />
		<result column="teamName"			property="teamName"				javaType="String" />
		<result column="useAmount"			property="useAmount"			javaType="String" />
		<result column="startDate"			property="startDate"			javaType="String" />
		<result column="endDate"			property="endDate"				javaType="String" />
		<result column="annualType"			property="annualType"			javaType="String" />
		<result column="reason"				property="reason"				javaType="String" />
		<result column="overtimeDate"		property="overtimeDate"			javaType="String" />
		<result column="doDate"				property="doDate"				javaType="String" />
		<result column="businessContent" 	property="businessContent"		javaType="String" />
		<result column="coDepartment"		property="coDepartment"			javaType="String" />
		<result column="totalExpenseAmount"	property="totalExpenseAmount"	javaType="String" />
	</resultMap>
	<select id="documentView" parameterType="HashMap" resultMap="documentView_Map">
		select d.documentNo, fk_employeeNo, subject, to_char(draftDate, 'yyyy-mm-dd') as draftDate, d.status
			 , d.securityLevel, temp, documentType, to_char(approvalDate, 'yyyy-mm-dd') as approvalDate, name, teamName, urgent
		<if test="documentType == '휴가신청서'">
		     , useAmount, reason, annualType
		     , case to_char(startDate, 'yyyy-mm-dd') when '1111-11-11' then '-' else to_char(startDate, 'yyyy-mm-dd') end as startDate
		     , case to_char(endDate, 'yyyy-mm-dd') when '1111-11-11' then '-' else to_char(endDate, 'yyyy-mm-dd') end as endDate
		from tbl_document D JOIN tbl_draft_annual A
		</if>
		<if test="documentType == '연장근무신청서'">
			, reason
			, case to_char(overtimeDate, 'yyyy-mm-dd') when '1111-11-11' then '-' else to_char(overtimeDate, 'yyyy-mm-dd') end as overtimeDate
		from tbl_document D JOIN tbl_draft_overtime A
		</if>
		<if test="documentType == '업무기안'">
			, businessContent, coDepartment
			, case to_char(doDate, 'yyyy-mm-dd') when '1111-11-11' then '-' else to_char(doDate, 'yyyy-mm-dd') end as doDate
		from tbl_document D JOIN tbl_draft_business A
		</if>
		<if test="documentType == '지출품의서'">
			, reason, totalexpenseamount
		from tbl_document D JOIN tbl_draft_expense A
		</if>
		ON d.documentNo = A.documentNo JOIN tbl_employee E
		ON d.fk_employeeNo = E.employeeNo JOIN tbl_team T
		ON E.fk_teamNo = T.teamno
		where d.documentNo = #{documentNo}
	</select>
	
	
	<!-- 문서함에서 보여줄 결재자 리스트 가져오기 -->
	<select id="getApprovalList" parameterType="String" resultType="ApprovalVO">
		select approvalNo, fk_documentNo, fk_approver, approvalOrder, approvalStatus, teamName
			 , nvl(to_char(executionDate, 'yyyy-mm-dd'), '-') as executionDate, positionname, name, approvalStatus
		from tbl_approval JOIN tbl_employee
		ON fk_approver = employeeNo JOIN tbl_position
		ON fk_positionno = positionno JOIN tbl_team
		ON fk_teamno = teamno
		where fk_documentNo = #{documentNo}
		order by approvalOrder desc
	</select>
	
	
	<!-- 조직도에 뿌려주기 위한 부서 목록 가져오기 -->
	<select id="getDepartmentList" resultType="DepartmentVO">
		select departmentNo, departmentName
		from tbl_department
	</select>
	
	
	<!-- 조직도에 뿌려주기 위한 팀 목록 가져오기 -->
	<select id="getTeamList" resultType="TeamVO">
		select teamNo, teamName, FK_departmentNo
		from tbl_team
	</select>
	
	
	<!-- 조직도에 뿌려주기 위한 사원 목록 가져오기 -->
	<select id="getEmployeeList" resultType="EmployeeVO">
		select employeeNo, departmentName, FK_departmentNo, name, securityLevel, FK_teamNo
		from tbl_employee E JOIN tbl_department D
		ON FK_departmentNo = departmentNo
		order by FK_departmentNo, securityLevel
	</select>
	
	
	<!-- 결재 라인에 추가하기 위한 사원 1명 가져오기 -->
	<select id="getEmployeeOne" parameterType="String" resultType="EmployeeVO">
		select employeeNo, teamname, name, securityLevel, positionname
		from tbl_employee JOIN tbl_team
		ON FK_teamno = teamno
		JOIN tbl_position
		ON FK_positionNo = positionno
		where employeeNo = to_number(#{employeeNo})
	</select>
	
	
	<!-- 결재 라인 승인자 추가하기 -->
	<insert id="insertApprover" parameterType="HashMap">
		insert into tbl_approval(APPROVALNO, FK_DOCUMENTNO, FK_APPROVER, APPROVALORDER, APPROVALSTATUS)
		values(seq_approval.nextval, #{documentNo}, to_number(#{fk_approver}), to_number(#{approvalorder}), default)
	</insert>
	

	<!-- document sequence 값 가져오기 -->
	<select id="getSeqDocument" resultType="String">
		select seq_document.nextval from dual
	</select>


	<!-- document 테이블에 데이터 입력 -->
	<insert id="insertDocument" parameterType="HashMap">
		insert into tbl_document(DOCUMENTNO, FK_EMPLOYEENO, SUBJECT, DRAFTDATE, TEMP, DOCUMENTTYPE, URGENT)
		values(#{documentNo}, to_number(#{fk_employeeNo}), #{subject}, sysdate, to_number(#{temp}), #{documentType}, to_number(#{urgent}))
	</insert>
	
	
	<!-- 휴가신청서 테이블에 데이터 입력 -->
	<insert id="insertAnnualDraft" parameterType="HashMap">
		insert into tbl_draft_annual(DOCUMENTNO, USEAMOUNT, REASON, STARTDATE, ENDDATE, ANNUALTYPE)
		values(#{documentNo}, to_number(#{useAmount}), #{reason}, to_date(#{startDate}, 'yyyy-MM-dd'), to_date(#{endDate}, 'yyyy-MM-dd'), to_number(#{annualType}))
	</insert>
	
	
	<!-- 연장근무신청서 테이블에 데이터 입력 -->
	<insert id="insertOvertimeDraft" parameterType="HashMap">
		insert into tbl_draft_overtime(DOCUMENTNO, REASON, OVERTIMEDATE)
		values(#{documentNo}, #{reason}, to_date(#{overtimeDate}, 'yyyy-MM-dd'))
	</insert>
	
	
	<!-- 업무기안 테이블에 데이터 입력 -->
	<insert id="insertBusinessDraft" parameterType="HashMap">
		insert into tbl_draft_business(DOCUMENTNO, businessContent, DODATE, CODEPARTMENT)
		values(#{documentNo}, #{businessContent}, to_date(#{doDate}, 'yyyy-MM-dd'), #{coDepartment})
	</insert>
	
	
	<!-- 업무기안 테이블에 데이터 입력 -->
	<insert id="insertExpenseDraft" parameterType="HashMap">
		insert into tbl_draft_expense(DOCUMENTNO, REASON, TOTALEXPENSEAMOUNT)
		values(#{documentNo}, #{reason}, to_number(#{totalExpenseAmount}))
	</insert>
	
	
	<!-- 결재 승인하기 -->
	<update id="approve" parameterType="HashMap">
		update tbl_approval set approvalStatus = 1, executiondate = sysdate
		where fk_documentNo = #{documentNo} and fk_approver = to_number(#{employeeNo})
	</update>
	
	
	<!-- 결재자의 승인 순서 알아오기 -->
	<select id="getApprovalOrder" parameterType="HashMap" resultType="Integer">
		select approvalOrder
		from tbl_approval
		where fk_documentNo = #{documentNo} and fk_approver = to_number(#{employeeNo})
	</select>
	
	
	<!-- 문서의 결재 상태를 업데이트 하기 -->
	<update id="updateDocumentApprovalStatus" parameterType="HashMap">
		update tbl_document set status = #{status}, approvaldate = sysdate
		where documentno = #{documentNo}
	</update>
	
	
	<update id="reject" parameterType="HashMap">
		update tbl_approval set approvalStatus = 2, executiondate = sysdate
		where fk_documentNo = #{documentNo} and fk_approver = to_number(#{employeeNo})
	</update>
	
	
	<!-- 임시저장 문서 삭제하기 -->
	<delete id="deleteTemp" parameterType="String">
		delete tbl_document
		where documentNo = #{documentNo}
	</delete>
	
	
	<!-- 임시저장 문서 리스트 삭제하기 -->
	<delete id="deleteTempList" parameterType="list">
		delete from tbl_document
		where documentNo in
		<foreach collection="list" item="documentNo" open="(" separator="," close=")">
	        #{documentNo}
	    </foreach>
	</delete>
	
	
	<!-- 휴가신청서 잔여 연차 가져오기 -->
	<select id="getAnnual" parameterType="HashMap" resultType="Integer">
		select occurannual + overannual + addannual - nvl( (
        
			select sum(useamount) as usedAnnual
			from tbl_document D join tbl_draft_annual A
			on D.DOCUMENTNO = A.DOCUMENTNO
			where fk_employeeno = to_number(#{employeeNo})
			and to_char(startdate, 'yyyy') = #{year}
			and D.status = 1
			group by to_char(startdate, 'yyyy')	) ,0) as totalAmount
	
		from tbl_annual
		where fk_employeeNo = to_number(#{employeeNo}) and year = #{year}
		
		UNION ALL
		
		select 0 AS totalAmount
		from dual
		where not exists
		(
			select occurannual + overannual - addannual as totalAmount
			from tbl_annual
			where fk_employeeNo = to_number(#{employeeNo}) and year = #{year}
		)
	</select>
	
	
	<!-- 휴가신청서 승인 시 근태 테이블에 데이터 넣어주기 -->
	<insert id="insertCommuteWithAnnual" parameterType="HashMap">
		insert into tbl_commute(commuteNo, FK_employeeNo, status, rest, overTimeYN, workdate, starttime, endtime)
		values(commuteSeq.nextval, to_number(#{fk_employeeNo}), to_number('6'), to_number(#{annualType}), to_number('0'), #{startDate}, to_date(#{startDate}, 'yyyy-mm-dd'), to_date(#{startDate}, 'yyyy-mm-dd'))
	</insert>
	
	
	<!-- 휴가신청서 신청 시 겹치는지 확인 -->
	<select id="checkAnuualOverlap" parameterType="HashMap" resultType="Integer">
		select count(*)
		from tbl_commute
		where rest in (1,2,3) and fk_employeeNo = to_number(#{fk_employeeNo}) and workdate between #{startDate} and #{endDate}
	</select>
	
	
	<!-- 연장근무신청서 일자가 겹치는지 확인 -->
	<select id="checkOvertimeOverlap" parameterType="HashMap" resultType="Integer">
		select count(*)
		from tbl_draft_overtime O JOIN tbl_document D
		ON O.documentNo = D.documentNo
		where fk_employeeNo = to_number(#{fk_employeeNo}) and overtimeDate = #{overtimeDate}
	</select>
	
	
	<!-- 연장근무신청서 승인 시 근태 테이블에 데이터 update -->
	<update id="updateCommuteWithOvertime" parameterType="HashMap">
		update tbl_commute set overTimeYN = 1
		where fk_employeeNo = to_number(#{fk_employeeNo}) and workdate = #{overtimeDate}
	</update>
	
	
	<!-- 연장근무신청서 승인 시 근태 테이블에 데이터 insert -->
	<insert id="insertCommuteWithOvertime" parameterType="HashMap">
		insert into tbl_commute(commuteNo, FK_employeeNo, status, rest, overTimeYN, workdate, starttime)
		values(commuteSeq.nextval, to_number(#{fk_employeeNo}), to_number('6'), to_number('0'), to_number('1'), #{overtimeDate}, to_date(#{overtimeDate},'yyyy-mm-dd'))
	</insert>
	
	
	<!-- 해당 사원이 휴가 캘린더가 있는지 확인 -->
	<select id="checkVacationCalendar" parameterType="String" resultType="Integer">
		select SMCATGONO
		from TBL_CALENDAR_SMALL_CATEGORY
		where FK_LGCATGONO = 1 and SMCATGONAME = '휴가' and fk_employeeNo = to_number(${fk_employeeNo})
		
		UNION ALL
		
		select 0 as SMCATGONO
		from dual
		where not exists
		(
			select SMCATGONO
			from TBL_CALENDAR_SMALL_CATEGORY
			where FK_LGCATGONO = 1 and SMCATGONAME = '휴가' and fk_employeeNo = to_number(${fk_employeeNo})
		)
	</select>
	
	
	<!-- 캘린더 스몰 카테고리 채번하기 -->
	<select id="getSeqSmcatgono">
		select SEQ_SMCATGONO.nextval
		from dual
	</select>
	
	
	<!-- 휴가 캘린더 생성하기 -->
	<insert id="createVacationCalendar" parameterType="HashMap">
		insert into TBL_CALENDAR_SMALL_CATEGORY(SMCATGONO, FK_LGCATGONO, SMCATGONAME, FK_EMPLOYEENO)
		values(to_number(#{smcatgono}), 1, '휴가', to_number(#{fk_employeeNo}))
	</insert>
	
	
	<!-- 휴가 스케쥴 생성하기 -->
	<insert id="createVacationSchedule" parameterType="HashMap">
		insert into TBL_CALENDAR_SCHEDULE(SCHEDULENO, STARTDATE, ENDDATE, SUBJECT, COLOR, FK_SMCATGONO, FK_LGCATGONO, FK_EMPLOYEENO)
		values(seq_scheduleno.nextval, to_date(#{startDate}, 'yyyy-mm-dd hh24:mi'), to_date(#{endDate}, 'yyyy-mm-dd hh24:mi'), '연차', '#009900', to_number(#{smcatgono}), 1, to_number(#{fk_employeeNo}))
	</insert>
	
	
	<!-- 지출 품의 상세 insert -->
	<insert id="insertExpenseDetail" parameterType="HashMap">
		insert into TBL_EXPENSE_DETAIL(EXPENSEDETAILNO, FK_DOCUMENTNO, AMOUNT, USEDATE, TYPE, CONTENT, NOTE)
		values(seq_expensedetail.nextval, '${documentNo}', to_number(${amount}), to_date('${useDate}', 'yyyy-mm-dd'), '${type}', '${content}', '${note}')
	</insert>
	
	
	<!-- 지출 품의 상세 가져오기 -->
	<resultMap type="HashMap" id="expenseDetailList_map">
		<result column="amount"		property="amount" 	javaType="String" />
		<result column="useDate"	property="useDate" 	javaType="String" />
		<result column="type"		property="type" 	javaType="String" />
		<result column="content"	property="content" 	javaType="String" />
		<result column="note"		property="note" 	javaType="String" />
	</resultMap>
	<select id="expenseDetailList" parameterType="HashMap" resultMap="expenseDetailList_map">
		select AMOUNT, to_char(USEDATE, 'yyyy-mm-dd') as useDate, TYPE, CONTENT, NOTE
		from tbl_expense_detail
		where fk_documentno = '${documentNo}'
	</select>
	
	
	
	<!-- 전자결재 통합검색 메인 -->
	<select id="searchDocument" resultType="DocumentVO" parameterType="HashMap">
		select approvalNo, fk_approver, fk_documentNo, approvalOrder, fk_employeeNo, subject, draftDate
		     , documentType, name, documentNo, approvalDate , status, urgent
		from
		(
		    select rownum as rno, approvalNo, fk_approver, fk_documentNo, approvalOrder, fk_employeeNo, subject, to_char(draftDate, 'yyyy-mm-dd') as draftDate
		         , documentType, name, documentNo, to_char(approvalDate, 'yyyy-mm-dd') as approvalDate , D.status as status, urgent
		    from
		    (
		        select  approvalNo, fk_approver, fk_documentNo, approvalOrder
		        from tbl_approval
		        where APPROVALSTATUS != 0 and fk_approver = to_number(#{employeeNo})
		    ) A JOIN tbl_document D
		    ON fk_documentNo = documentNo
		    JOIN tbl_employee
		    ON fk_employeeNo = employeeNo
		    where temp = 0 and lower(subject) like '%'||lower(#{searchWord})||'%' 
		    order by documentNo desc
		)
	</select>
	
</mapper>









